// Generated by view binder compiler. Do not edit!
package com.mongodb.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.mongodb.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ChangePasswordViewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatButton buttonCancelChangePass;

  @NonNull
  public final AppCompatButton buttonConfirmChangePass;

  @NonNull
  public final EditText confirmNewPassword;

  @NonNull
  public final EditText newPassword;

  @NonNull
  public final EditText oldPassword;

  @NonNull
  public final TextView textView;

  private ChangePasswordViewBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppCompatButton buttonCancelChangePass,
      @NonNull AppCompatButton buttonConfirmChangePass, @NonNull EditText confirmNewPassword,
      @NonNull EditText newPassword, @NonNull EditText oldPassword, @NonNull TextView textView) {
    this.rootView = rootView;
    this.buttonCancelChangePass = buttonCancelChangePass;
    this.buttonConfirmChangePass = buttonConfirmChangePass;
    this.confirmNewPassword = confirmNewPassword;
    this.newPassword = newPassword;
    this.oldPassword = oldPassword;
    this.textView = textView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ChangePasswordViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ChangePasswordViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.change_password_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ChangePasswordViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_cancel_change_pass;
      AppCompatButton buttonCancelChangePass = rootView.findViewById(id);
      if (buttonCancelChangePass == null) {
        break missingId;
      }

      id = R.id.button_confirm_change_pass;
      AppCompatButton buttonConfirmChangePass = rootView.findViewById(id);
      if (buttonConfirmChangePass == null) {
        break missingId;
      }

      id = R.id.confirmNewPassword;
      EditText confirmNewPassword = rootView.findViewById(id);
      if (confirmNewPassword == null) {
        break missingId;
      }

      id = R.id.newPassword;
      EditText newPassword = rootView.findViewById(id);
      if (newPassword == null) {
        break missingId;
      }

      id = R.id.oldPassword;
      EditText oldPassword = rootView.findViewById(id);
      if (oldPassword == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = rootView.findViewById(id);
      if (textView == null) {
        break missingId;
      }

      return new ChangePasswordViewBinding((ConstraintLayout) rootView, buttonCancelChangePass,
          buttonConfirmChangePass, confirmNewPassword, newPassword, oldPassword, textView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
